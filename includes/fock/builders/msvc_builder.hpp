#pragma once

// STD includes
#include <string>
#include <vector>
#include <string_view>
#include <filesystem>
#include <exception>
#include <format>

// FOCK includes
#include <fock/projects/cpp_project.hpp>
#include <fock/utils/system_utils.hpp>

namespace fock
{
    class MSVCBuilder
    {
    public:

        /*
        Default constructor of the MSVCBuilder class
        */
        inline MSVCBuilder() = default;

        /*
        Default destructor of the MSVCBuilder class
        */
        inline virtual ~MSVCBuilder() noexcept = default;

        /*
        This method compile the sources files of the CppProject given in parameter.
        @param project The CppProject to compile
        @param additional_compiler_params The additional MSVC compiler params
        */
        void CompileSources(const fock::CppProject & project, const std::vector<std::string> & additional_compiler_params) const;

        /*
        This method compile the modules files of the CppProject given in parameter.
        @param project The CppProject to compile
        @param additional_compiler_params The additional MSVC compiler params
        */
        void CompileModules(const fock::CppProject & project, const std::vector<std::string> & additional_compiler_params) const;

        /*
        This method link the objects files generated by the CppProject given in parameter.
        @param project The CppProject to link
        @param additional_linker_params The additional MSVC linker params
        */
        void CreateExecutable(const fock::CppProject & project, const std::vector<std::string> & additional_linker_params) const;

        /*
        This method return the command to compile the sources files of the CppProject given in parameter.
        @param project The CppProject to compile
        @param additional_compiler_params The additional MSVC compiler params
        @return a string that contains the command to compile the sources
        */
        std::string GetCommandToCompileSources(const fock::CppProject & project, const std::vector<std::string> & additional_compiler_params) const;

        /*
        This method return the command to compile the modules files of the CppProject given in parameter.
        @param project The CppProject to compile
        @param additional_compiler_params The additional MSVC compiler params
        @return a string that contains the command to compile the modules
        */
        std::string GetCommandToCompileModules(const fock::CppProject & project, const std::vector<std::string> & additional_compiler_params) const;

        /*
        This method return the command to link the objects files generated by the CppProject given in parameter.
        @param project The CppProject to link
        @param additional_linker_params The additional MSVC linker params
        @return a string that contains the command to link the executable
        */
        std::string GetCommandToCreateExecutable(const fock::CppProject & project, const std::vector<std::string> & additional_compiler_params) const;

        /*
        This method return the compiler params registered in the json file.
        @param project The CppProject
        @return a std::vector<string> that contains the list of params to compile
        */
        std::vector<std::string> GetCompilerParams(const fock::CppProject & project) const;

        /*
        This method return the linker params registered in the json file.
        @param project The CppProject
        @return a std::vector<string> that contains the list of params to link
        */
        std::vector<std::string> GetLinkerParams(const fock::CppProject & project) const;

        /*
        This method build the CppProject given in parameter.
        @param project The CppProject to build
        */
        void Build(const fock::CppProject & project) const;
    };
}